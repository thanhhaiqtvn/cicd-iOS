# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

# General
BUNDLE_IDENTIFIER               = ENV["BUNDLE_IDENTIFIER"]
WORKSPACE                       = ENV["WORKSPACE"]
SCHEME_DEV                      = ENV["SCHEME_DEV"]
SCHEME_RELEASE                  = ENV["SCHEME_RELEASE"]
BUILD_CONFIGURATION_DEBUG       = ENV["BUILD_CONFIGURATION_DEBUG"]
BUILD_CONFIGURATION_RELEASE     = ENV["BUILD_CONFIGURATION_RELEASE"]
PROJECT_VERSION                 = ENV["PROJECT_VERSION"]
PROJECT_NAME                    = ENV["PROJECT_NAME"]

# CodeSignIn
TEMP_KEYCHAIN_USER              = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD          = ENV["TEMP_KEYCHAIN_PASSWORD"]
GIT_AUTHORIZATION               = ENV["GIT_AUTHORIZATION"]
PROVISIONING_PROFILE_SPECIFIER_DEV  = ENV["PROVISIONING_PROFILE_SPECIFIER_DEV"]
PROVISIONING_PROFILE_SPECIFIER_APPSTORE = ENV["PROVISIONING_PROFILE_SPECIFIER_APPSTORE"]

# Fastlane
FASTLANE_MATCH_TYPE_DEV         = ENV["FASTLANE_MATCH_TYPE_DEV"]
FASTLANE_MATCH_TYPE_APPSTORE    = ENV["FASTLANE_MATCH_TYPE_APPSTORE"]

# App Center
APP_CENTER_API_TOKEN            = ENV["APP_CENTER_API_TOKEN"]
APP_CENTER_OWNER_NAME           = ENV["APP_CENTER_OWNER_NAME"]
APP_CENTER_APP_NAME             = ENV["APP_CENTER_APP_NAME"]
APP_CENTER_GROUPS_DEV           = ENV["APP_CENTER_GROUPS_DEV"]
APP_CENTER_GROUPS_DIST          = ENV["APP_CENTER_GROUPS_DIST"]

# Sonar
SONAR_TOKEN                     = ENV["SONAR_TOKEN"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    default_keychain: false,
    unlock: true,
    timeout: 3600,
    lock_when_sleeps: false
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
	
    desc 'Builds project and executes unit tests'
    lane :tests do
      run_tests(
          workspace: WORKSPACE,
          scheme: SCHEME_DEV
      )
    end
    
    # Apple TestFight upload binaries
    desc "Submit a new build for Apple TestFlight with current version and builder number (Debug)"
    lane :dev do |options|
      build_debug
      delete_temp_keychain(TEMP_KEYCHAIN_USER)
    end

    desc "Submit a new build for Apple TestFlight with current version and builder number (Production)"
    lane :prod do |options|
      build_release
      delete_temp_keychain(TEMP_KEYCHAIN_USER)
    end

    # AppCenter upload binaries
    desc "Submit a new build to AppCenter with current version and builder number (Debug)"
    lane :dev_appCenter do |options|
      build_debug
      appCenter(scheme: SCHEME_DEV, groups: APP_CENTER_GROUPS_DEV)
      delete_temp_keychain(TEMP_KEYCHAIN_USER)
    end

    desc "Submit a new build to AppCenter with current version and builder number (Production)"
    lane :prod_appCenter do |options|
      build_release
      appCenter(scheme: SCHEME_RELEASE, groups: APP_CENTER_GROUPS_DIST)
      delete_temp_keychain(TEMP_KEYCHAIN_USER)
    end

    # Sonar Analysic
    desc "Run Sonarqude"
    lane :sonar_run do
      sonar(
        project_key: BUNDLE_IDENTIFIER,
        project_version: PROJECT_VERSION,
        project_name: PROJECT_NAME,
        sources_path: File.expand_path("../sonar_reports"),
        sonar_organization: "thanhhaiqtvn",
        sonar_login: SONAR_TOKEN,
        sonar_url: "https://sonarcloud.io"
      )
    end

    ###############################################
    ################# private_lane ################
    ###############################################
    private_lane :setup_certificates do |options|
      ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)
      
      match(
        type: options[:type],
        app_identifier: BUNDLE_IDENTIFIER,
        keychain_name: TEMP_KEYCHAIN_USER,
        keychain_password: TEMP_KEYCHAIN_PASSWORD,
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: true,
        force_for_new_devices: true
      )
  
      create_keychain(
        name: TEMP_KEYCHAIN_USER,
        password: TEMP_KEYCHAIN_PASSWORD,
        default_keychain: false,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: false
      )
    end

    private_lane :appCenter do |options|
      # Upload the app to appCenter
      appcenter_upload(
        api_token: APP_CENTER_API_TOKEN,
        owner_name: APP_CENTER_OWNER_NAME,
        app_name: APP_CENTER_APP_NAME,
        destinations: options[:groups],
        release_notes: (options[:scheme].include? "Release") ? "RELEASE Build\n=============" : "DEBUG Build\n===========",
        notify_testers: true
      )
    end

    private_lane :build do |options|
      gym(
        scheme: options[:scheme],
        configuration: options[:configuration],
        workspace: WORKSPACE,
        export_method: options[:export_method],
        export_options: {
          provisioningProfiles: { 
            BUNDLE_IDENTIFIER => options[:provisioning_profiles]
          }
        },
        xcargs: "-allowProvisioningUpdates",
        export_xcargs: "-allowProvisioningUpdates",
        suppress_xcode_output: true,
        clean: true
      )
      # testflight(app_identifier: options[:app_identifier], changelog: options[:changelog], skip_waiting_for_build_processing: true)
    end

    private_lane :build_debug do
      clear_derived_data
      xcclean(scheme: SCHEME_DEV)
      setup_certificates(type: FASTLANE_MATCH_TYPE_DEV)
      build(
        scheme: SCHEME_DEV,
        export_method: "development",
        provisioning_profiles: PROVISIONING_PROFILE_SPECIFIER_DEV,
        configuration: BUILD_CONFIGURATION_DEBUG
      )
    end

    private_lane :build_release do |options|
      clear_derived_data
      xcclean(scheme: SCHEME_RELEASE)
      setup_certificates(type: FASTLANE_MATCH_TYPE_APPSTORE)
      build(
        scheme: SCHEME_RELEASE,
        export_method: "app-store",
        provisioning_profiles: PROVISIONING_PROFILE_SPECIFIER_APPSTORE,
        configuration: BUILD_CONFIGURATION_RELEASE
      )
    end
	
    before_all do |lane|
      # Ensure that your git status is not dirty
      # ensure_git_status_clean
    end

    after_all do |lane|
      # This block is called, only if the executed lane was successful
      copy_artifacts(
          target_path: "artifacts",
          artifacts: ["*.cer", "*.mobileprovision", "*.ipa", "*.dSYM.zip"],
          keep_original: false
      )
    end

    error do |lane, exception|
      #reset_git_repo(force: true)
    end
end